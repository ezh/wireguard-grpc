// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: wireguard/v1/wireguard_service.proto

package wireguardv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WireGuardServiceClient is the client API for WireGuardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WireGuardServiceClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Dump(ctx context.Context, in *DumpRequest, opts ...grpc.CallOption) (*DumpResponse, error)
}

type wireGuardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWireGuardServiceClient(cc grpc.ClientConnInterface) WireGuardServiceClient {
	return &wireGuardServiceClient{cc}
}

func (c *wireGuardServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/wireguard.v1.WireGuardService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireGuardServiceClient) Dump(ctx context.Context, in *DumpRequest, opts ...grpc.CallOption) (*DumpResponse, error) {
	out := new(DumpResponse)
	err := c.cc.Invoke(ctx, "/wireguard.v1.WireGuardService/Dump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WireGuardServiceServer is the server API for WireGuardService service.
// All implementations must embed UnimplementedWireGuardServiceServer
// for forward compatibility
type WireGuardServiceServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Dump(context.Context, *DumpRequest) (*DumpResponse, error)
	mustEmbedUnimplementedWireGuardServiceServer()
}

// UnimplementedWireGuardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWireGuardServiceServer struct {
}

func (UnimplementedWireGuardServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedWireGuardServiceServer) Dump(context.Context, *DumpRequest) (*DumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dump not implemented")
}
func (UnimplementedWireGuardServiceServer) mustEmbedUnimplementedWireGuardServiceServer() {}

// UnsafeWireGuardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WireGuardServiceServer will
// result in compilation errors.
type UnsafeWireGuardServiceServer interface {
	mustEmbedUnimplementedWireGuardServiceServer()
}

func RegisterWireGuardServiceServer(s grpc.ServiceRegistrar, srv WireGuardServiceServer) {
	s.RegisterService(&WireGuardService_ServiceDesc, srv)
}

func _WireGuardService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireGuardServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wireguard.v1.WireGuardService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireGuardServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireGuardService_Dump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireGuardServiceServer).Dump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wireguard.v1.WireGuardService/Dump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireGuardServiceServer).Dump(ctx, req.(*DumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WireGuardService_ServiceDesc is the grpc.ServiceDesc for WireGuardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WireGuardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wireguard.v1.WireGuardService",
	HandlerType: (*WireGuardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _WireGuardService_Ping_Handler,
		},
		{
			MethodName: "Dump",
			Handler:    _WireGuardService_Dump_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wireguard/v1/wireguard_service.proto",
}
