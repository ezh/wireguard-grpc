// Code generated by MockGen. DO NOT EDIT.
// Source: api/wireguard/v1/wireguard_service_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	wireguardv1 "github.com/ezh/wireguard-grpc/api/wireguard/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockWireGuardServiceClient is a mock of WireGuardServiceClient interface.
type MockWireGuardServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockWireGuardServiceClientMockRecorder
}

// MockWireGuardServiceClientMockRecorder is the mock recorder for MockWireGuardServiceClient.
type MockWireGuardServiceClientMockRecorder struct {
	mock *MockWireGuardServiceClient
}

// NewMockWireGuardServiceClient creates a new mock instance.
func NewMockWireGuardServiceClient(ctrl *gomock.Controller) *MockWireGuardServiceClient {
	mock := &MockWireGuardServiceClient{ctrl: ctrl}
	mock.recorder = &MockWireGuardServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWireGuardServiceClient) EXPECT() *MockWireGuardServiceClientMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *MockWireGuardServiceClient) Dump(ctx context.Context, in *wireguardv1.DumpRequest, opts ...grpc.CallOption) (*wireguardv1.DumpResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Dump", varargs...)
	ret0, _ := ret[0].(*wireguardv1.DumpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dump indicates an expected call of Dump.
func (mr *MockWireGuardServiceClientMockRecorder) Dump(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockWireGuardServiceClient)(nil).Dump), varargs...)
}

// Ping mocks base method.
func (m *MockWireGuardServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockWireGuardServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockWireGuardServiceClient)(nil).Ping), varargs...)
}

// MockWireGuardServiceServer is a mock of WireGuardServiceServer interface.
type MockWireGuardServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockWireGuardServiceServerMockRecorder
}

// MockWireGuardServiceServerMockRecorder is the mock recorder for MockWireGuardServiceServer.
type MockWireGuardServiceServerMockRecorder struct {
	mock *MockWireGuardServiceServer
}

// NewMockWireGuardServiceServer creates a new mock instance.
func NewMockWireGuardServiceServer(ctrl *gomock.Controller) *MockWireGuardServiceServer {
	mock := &MockWireGuardServiceServer{ctrl: ctrl}
	mock.recorder = &MockWireGuardServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWireGuardServiceServer) EXPECT() *MockWireGuardServiceServerMockRecorder {
	return m.recorder
}

// Dump mocks base method.
func (m *MockWireGuardServiceServer) Dump(arg0 context.Context, arg1 *wireguardv1.DumpRequest) (*wireguardv1.DumpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", arg0, arg1)
	ret0, _ := ret[0].(*wireguardv1.DumpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dump indicates an expected call of Dump.
func (mr *MockWireGuardServiceServerMockRecorder) Dump(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockWireGuardServiceServer)(nil).Dump), arg0, arg1)
}

// Ping mocks base method.
func (m *MockWireGuardServiceServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockWireGuardServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockWireGuardServiceServer)(nil).Ping), arg0, arg1)
}

// mustEmbedUnimplementedWireGuardServiceServer mocks base method.
func (m *MockWireGuardServiceServer) mustEmbedUnimplementedWireGuardServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWireGuardServiceServer")
}

// mustEmbedUnimplementedWireGuardServiceServer indicates an expected call of mustEmbedUnimplementedWireGuardServiceServer.
func (mr *MockWireGuardServiceServerMockRecorder) mustEmbedUnimplementedWireGuardServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWireGuardServiceServer", reflect.TypeOf((*MockWireGuardServiceServer)(nil).mustEmbedUnimplementedWireGuardServiceServer))
}

// MockUnsafeWireGuardServiceServer is a mock of UnsafeWireGuardServiceServer interface.
type MockUnsafeWireGuardServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeWireGuardServiceServerMockRecorder
}

// MockUnsafeWireGuardServiceServerMockRecorder is the mock recorder for MockUnsafeWireGuardServiceServer.
type MockUnsafeWireGuardServiceServerMockRecorder struct {
	mock *MockUnsafeWireGuardServiceServer
}

// NewMockUnsafeWireGuardServiceServer creates a new mock instance.
func NewMockUnsafeWireGuardServiceServer(ctrl *gomock.Controller) *MockUnsafeWireGuardServiceServer {
	mock := &MockUnsafeWireGuardServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeWireGuardServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeWireGuardServiceServer) EXPECT() *MockUnsafeWireGuardServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedWireGuardServiceServer mocks base method.
func (m *MockUnsafeWireGuardServiceServer) mustEmbedUnimplementedWireGuardServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWireGuardServiceServer")
}

// mustEmbedUnimplementedWireGuardServiceServer indicates an expected call of mustEmbedUnimplementedWireGuardServiceServer.
func (mr *MockUnsafeWireGuardServiceServerMockRecorder) mustEmbedUnimplementedWireGuardServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWireGuardServiceServer", reflect.TypeOf((*MockUnsafeWireGuardServiceServer)(nil).mustEmbedUnimplementedWireGuardServiceServer))
}
